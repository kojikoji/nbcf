// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_calculate_count_dict
Eigen::VectorXi rcpp_calculate_count_dict(const Eigen::Map<Eigen::VectorXi> count_vec);
RcppExport SEXP _nbcf_rcpp_calculate_count_dict(SEXP count_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXi> >::type count_vec(count_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_calculate_count_dict(count_vec));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_calculate_lnb_values
Eigen::MatrixXd rcpp_calculate_lnb_values(Eigen::VectorXi count_vec, Eigen::VectorXd p_vec, double r);
RcppExport SEXP _nbcf_rcpp_calculate_lnb_values(SEXP count_vecSEXP, SEXP p_vecSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXi >::type count_vec(count_vecSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_calculate_lnb_values(count_vec, p_vec, r));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_calculate_p_dict
Eigen::MatrixXi rcpp_calculate_p_dict(const Eigen::Map<Eigen::VectorXd> p_vec, const Eigen::Map<Eigen::VectorXd> mean_bias_vec);
RcppExport SEXP _nbcf_rcpp_calculate_p_dict(SEXP p_vecSEXP, SEXP mean_bias_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type mean_bias_vec(mean_bias_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_calculate_p_dict(p_vec, mean_bias_vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nbcf_rcpp_calculate_count_dict", (DL_FUNC) &_nbcf_rcpp_calculate_count_dict, 1},
    {"_nbcf_rcpp_calculate_lnb_values", (DL_FUNC) &_nbcf_rcpp_calculate_lnb_values, 3},
    {"_nbcf_rcpp_calculate_p_dict", (DL_FUNC) &_nbcf_rcpp_calculate_p_dict, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_nbcf(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
